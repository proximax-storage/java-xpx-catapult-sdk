/*
 * Catapult REST API Reference
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.proximax.sdk.gen.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.google.gson.annotations.SerializedName;

import io.swagger.annotations.ApiModelProperty;

/**
 * MosaicDefinitionTransactionBodyDTO
 */
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-09-22T22:57:50.932+02:00[Europe/Prague]")
public class MosaicDefinitionTransactionBodyDTO {
  public static final String SERIALIZED_NAME_MOSAIC_NONCE = "mosaicNonce";
  @SerializedName(SERIALIZED_NAME_MOSAIC_NONCE)
  private Integer mosaicNonce;

  public static final String SERIALIZED_NAME_MOSAIC_ID = "mosaicId";
  @SerializedName(SERIALIZED_NAME_MOSAIC_ID)
  private UInt64DTO mosaicId = new UInt64DTO();

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private List<MosaicPropertyDTO> properties = new ArrayList<>();

  public MosaicDefinitionTransactionBodyDTO mosaicNonce(Integer mosaicNonce) {
    this.mosaicNonce = mosaicNonce;
    return this;
  }

   /**
   * Random nonce used to generate the mosaic id.
   * @return mosaicNonce
  **/
  @ApiModelProperty(example = "0", required = true, value = "Random nonce used to generate the mosaic id.")
  public Integer getMosaicNonce() {
    return mosaicNonce;
  }

  public void setMosaicNonce(Integer mosaicNonce) {
    this.mosaicNonce = mosaicNonce;
  }

  public MosaicDefinitionTransactionBodyDTO mosaicId(UInt64DTO mosaicId) {
    this.mosaicId = mosaicId;
    return this;
  }

   /**
   * Get mosaicId
   * @return mosaicId
  **/
  @ApiModelProperty(required = true, value = "")
  public UInt64DTO getMosaicId() {
    return mosaicId;
  }

  public void setMosaicId(UInt64DTO mosaicId) {
    this.mosaicId = mosaicId;
  }

  public MosaicDefinitionTransactionBodyDTO properties(List<MosaicPropertyDTO> properties) {
    this.properties = properties;
    return this;
  }

  public MosaicDefinitionTransactionBodyDTO addPropertiesItem(MosaicPropertyDTO propertiesItem) {
    this.properties.add(propertiesItem);
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @ApiModelProperty(required = true, value = "")
  public List<MosaicPropertyDTO> getProperties() {
    return properties;
  }

  public void setProperties(List<MosaicPropertyDTO> properties) {
    this.properties = properties;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MosaicDefinitionTransactionBodyDTO mosaicDefinitionTransactionBodyDTO = (MosaicDefinitionTransactionBodyDTO) o;
    return Objects.equals(this.mosaicNonce, mosaicDefinitionTransactionBodyDTO.mosaicNonce) &&
        Objects.equals(this.mosaicId, mosaicDefinitionTransactionBodyDTO.mosaicId) &&
        Objects.equals(this.properties, mosaicDefinitionTransactionBodyDTO.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mosaicNonce, mosaicId, properties);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MosaicDefinitionTransactionBodyDTO {\n");
    sb.append("    mosaicNonce: ").append(toIndentedString(mosaicNonce)).append("\n");
    sb.append("    mosaicId: ").append(toIndentedString(mosaicId)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

