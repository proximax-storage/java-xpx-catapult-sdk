// automatically generated by the FlatBuffers compiler, do not modify

package io.proximax.sdk.gen.buffers;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class MosaicLevyBuffer extends Table {
  public static MosaicLevyBuffer getRootAsMosaicLevyBuffer(ByteBuffer _bb) { return getRootAsMosaicLevyBuffer(_bb, new MosaicLevyBuffer()); }
  public static MosaicLevyBuffer getRootAsMosaicLevyBuffer(ByteBuffer _bb, MosaicLevyBuffer obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public MosaicLevyBuffer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int type() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int recipient(int j) { int o = __offset(6); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int recipientLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer recipientAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer recipientInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public long mosaicId(int j) { int o = __offset(8); return o != 0 ? (long)bb.getInt(__vector(o) + j * 4) & 0xFFFFFFFFL : 0; }
  public int mosaicIdLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer mosaicIdAsByteBuffer() { return __vector_as_bytebuffer(8, 4); }
  public ByteBuffer mosaicIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 4); }
  public long fee(int j) { int o = __offset(10); return o != 0 ? (long)bb.getInt(__vector(o) + j * 4) & 0xFFFFFFFFL : 0; }
  public int feeLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer feeAsByteBuffer() { return __vector_as_bytebuffer(10, 4); }
  public ByteBuffer feeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 4); }

  public static int createMosaicLevyBuffer(FlatBufferBuilder builder,
      int type,
      int recipientOffset,
      int mosaicIdOffset,
      int feeOffset) {
    builder.startObject(4);
    MosaicLevyBuffer.addFee(builder, feeOffset);
    MosaicLevyBuffer.addMosaicId(builder, mosaicIdOffset);
    MosaicLevyBuffer.addRecipient(builder, recipientOffset);
    MosaicLevyBuffer.addType(builder, type);
    return MosaicLevyBuffer.endMosaicLevyBuffer(builder);
  }

  public static void startMosaicLevyBuffer(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addType(FlatBufferBuilder builder, int type) { builder.addByte(0, (byte)type, (byte)0); }
  public static void addRecipient(FlatBufferBuilder builder, int recipientOffset) { builder.addOffset(1, recipientOffset, 0); }
  public static int createRecipientVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startRecipientVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addMosaicId(FlatBufferBuilder builder, int mosaicIdOffset) { builder.addOffset(2, mosaicIdOffset, 0); }
  public static int createMosaicIdVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startMosaicIdVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addFee(FlatBufferBuilder builder, int feeOffset) { builder.addOffset(3, feeOffset, 0); }
  public static int createFeeVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startFeeVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endMosaicLevyBuffer(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

