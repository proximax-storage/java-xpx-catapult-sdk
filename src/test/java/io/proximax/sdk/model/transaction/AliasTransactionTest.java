/*
 * Copyright 2019 ProximaX Limited. All rights reserved.
 * Use of this source code is governed by the Apache 2.0
 * license that can be found in the LICENSE file.
 */
package io.proximax.sdk.model.transaction;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.io.IOException;
import java.math.BigInteger;
import java.util.Optional;

import org.junit.jupiter.api.Test;

import io.proximax.core.crypto.KeyPair;
import io.proximax.sdk.ResourceBasedTest;
import io.proximax.sdk.model.account.Account;
import io.proximax.sdk.model.account.Address;
import io.proximax.sdk.model.account.PublicAccount;
import io.proximax.sdk.model.alias.AliasAction;
import io.proximax.sdk.model.blockchain.NetworkType;
import io.proximax.sdk.model.mosaic.MosaicId;
import io.proximax.sdk.model.namespace.NamespaceId;

/**
 * {@link AliasTransaction} tests
 */
class AliasTransactionTest extends ResourceBasedTest {

   @Test
   void genericConstructor() {
      AliasTransaction trans = new AliasTransaction(TransactionType.ADDRESS_ALIAS, NetworkType.MIJIN,
            TransactionVersion.ADDRESS_ALIAS.getValue(), new FakeDeadline(), BigInteger.ZERO, Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.of(new Address("MB3KUBHATFCPV7UZQLWAQ2EUR6SIHBSBEOEDDDF5", NetworkType.MIJIN)), new NamespaceId("something"), AliasAction.LINK);

      // run assertions
      assertFalse(trans.getMosaicId().isPresent());
      assertEquals(new Address("MB3KUBHATFCPV7UZQLWAQ2EUR6SIHBSBEOEDDDF5", NetworkType.MIJIN), trans.getAddress().orElseThrow(AssertionError::new));
      assertEquals(new NamespaceId("something"), trans.getNamespaceId());
      assertEquals(AliasAction.LINK, trans.getAliasAction());
   }

   @Test
   void genericConstructorThrows() {
      assertThrows(IllegalArgumentException.class,
            () -> new AliasTransaction(TransactionType.MOSAIC_ALIAS, NetworkType.MIJIN,
                  TransactionVersion.ADDRESS_ALIAS.getValue(), new FakeDeadline(), BigInteger.ZERO, Optional.empty(),
                  Optional.empty(), Optional.empty(), Optional.empty(), 
                  Optional.of(new Address("MB3KUBHATFCPV7UZQLWAQ2EUR6SIHBSBEOEDDDF3", NetworkType.MIJIN)), new NamespaceId("testest"), AliasAction.LINK));
      assertThrows(IllegalArgumentException.class,
            () -> new AliasTransaction(TransactionType.ADDRESS_ALIAS, NetworkType.MIJIN,
                  TransactionVersion.ADDRESS_ALIAS.getValue(), new FakeDeadline(), BigInteger.ZERO, 
                  Optional.empty(), Optional.empty(), Optional.empty(), Optional.of(new MosaicId(
                        BigInteger.ONE)),
                  Optional.empty(), new NamespaceId("testest"), AliasAction.LINK));
   }

   @Test
   void addressSerialization() throws IOException {
      AliasTransaction trans = new AliasTransaction(TransactionType.ADDRESS_ALIAS, NetworkType.MIJIN,
            TransactionVersion.ADDRESS_ALIAS.getValue(), new FakeDeadline(), BigInteger.ZERO,
            Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.of(new Address("MB3KUBHATFCPV7UZQLWAQ2EUR6SIHBSBEOEDDDF3", NetworkType.MIJIN)), new NamespaceId("testest"), AliasAction.LINK);
      // generated by saveBytes
      byte[] actual = trans.generateBytes();
//      saveBytes("link_address", actual);
      assertArrayEquals(loadBytes("link_address"), actual);
   }

   @Test
   void mosaicSerialization() throws IOException {
      AliasTransaction trans = new AliasTransaction(TransactionType.MOSAIC_ALIAS, NetworkType.MIJIN,
            TransactionVersion.ADDRESS_ALIAS.getValue(), new FakeDeadline(), BigInteger.ZERO,
            Optional.empty(), Optional.empty(), Optional.empty(), Optional.of(new MosaicId(
                  BigInteger.ONE)),
            Optional.empty(), new NamespaceId("testest"), AliasAction.LINK);
      // generated by saveBytes
      byte[] actual = trans.generateBytes();
//      saveBytes("link_mosaic", actual);
      assertArrayEquals(loadBytes("link_mosaic"), actual);
   }

   @Test
   void checkCopyToSigner() {
      PublicAccount remoteAccount = new Account(new KeyPair(), NetworkType.MIJIN).getPublicAccount();
      
      AliasTransaction trans = new AliasTransaction(TransactionType.MOSAIC_ALIAS, NetworkType.MIJIN,
            TransactionVersion.ADDRESS_ALIAS.getValue(), new FakeDeadline(), BigInteger.ZERO,
            Optional.empty(), Optional.empty(), Optional.empty(), Optional.of(new MosaicId(
                  BigInteger.ONE)),
            Optional.empty(), new NamespaceId("testest"), AliasAction.LINK);

      Transaction t = trans.copyForSigner(remoteAccount);
      assertEquals(Optional.of(remoteAccount), t.getSigner());
   }
}
